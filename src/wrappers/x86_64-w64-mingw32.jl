# Autogenerated wrapper script for libserialport_jll for x86_64-w64-mingw32
export libserialport

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "PATH"

# Relative path to `libserialport`
const libserialport_splitpath = ["bin", "libserialport-0.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libserialport_path = ""

# libserialport-specific global declaration
# This will be filled out by __init__()
libserialport_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libserialport = "libserialport-0.dll"


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    global libserialport_path = abspath(joinpath(artifact"libserialport", libserialport_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libserialport_handle = dlopen(libserialport_path)
    push!(LIBPATH_list, dirname(libserialport_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ';')
    global LIBPATH = join(LIBPATH_list, ';')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

